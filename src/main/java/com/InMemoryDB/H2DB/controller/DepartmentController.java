package com.InMemoryDB.H2DB.controller;


import org.springframework.web.bind.annotation.RestController;

import com.InMemoryDB.H2DB.entity.Department;
import com.InMemoryDB.H2DB.error.DeptNotFound;
import com.InMemoryDB.H2DB.service.DepartmentService;

import jakarta.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;

import java.util.List;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.PathVariable;



@RestController
public class DepartmentController {   

    @GetMapping("/")
    public String hello() {
        return "hello world";
    }

    @Autowired // This means to get the bean called departmentService
    private DepartmentService departmentService; // Which is auto-generated by Spring, we will use it to handle the data

    private final Logger LOGGER = LoggerFactory.getLogger(DepartmentController.class);
    @PostMapping("/department")   
    public Department saveDepartment(@Valid @RequestBody Department department){ 
        LOGGER.info("Saving department: {}", department.getDepartmentId());
        return departmentService.saveDepartment(department);
    }

    @GetMapping("/department")
    public List<Department> getDepartment(){
        return departmentService.getDepartment();
    }

    @DeleteMapping("/department")
    public void deleteDepartment(){
        departmentService.deleteDepartment();
    }

    @PutMapping("/department/all")
    public String departmentUpdate(@RequestBody Department departmet) {
        return departmentService.updateDepartment(departmet);
    }

    @PostMapping("/department/all")
    public List<Department> saveAllDepartment(@RequestBody List<Department> department){ 
        return departmentService.saveAllDepartment(department);
    }

    @GetMapping("/department/{id}")
    public Department getDepartmentService(@PathVariable("id") int id) throws DeptNotFound {
        return departmentService.getDepartmentById(id);
    }

    @DeleteMapping("/department/{id}")
    public String deleteDepartmentById(@PathVariable("id") int id){
        return departmentService.deleteDepartmentById(id);
    }

    @PutMapping("department/{id}")
    public String updateDepartment(@PathVariable("id") int id, @RequestBody Department departmet) {
       return departmentService.departmentUpdate(id, departmet);
    }

    @GetMapping("/department/name/{name}")
    public List<Department> fetchByDeptName(@PathVariable("name") String name){
        return departmentService.fetchByDeptName(name);
    }
}
